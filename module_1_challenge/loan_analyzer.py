# coding: utf-8
import csv
from pathlib import Path

## BASE CODE OBTAINED FROM UW FINTECH BOOTCAMP COURSE MODULE (SEE INITIAL COMMIT)
## REMAINING CODE GENERATED BY ZROWGZ https://github.com/ZrowGz

## create a line break between sections
print("----------------- Section 1 ------------------")

"""Part 1: Automate the Calculations.

Automate the calculations for the loan portfolio summaries.

First, let's start with some calculations on a list of prices for 5 loans.
    1. Use the `len` function to calculate the total number of loans in the list.
    2. Use the `sum` function to calculate the total of all loans in the list.
    3. Using the sum of all loans and the total number of loans, calculate the average loan price.
    4. Print all calculations with descriptive messages.
"""
loan_costs = [500, 600, 200, 1000, 450]

# How many loans are in the list?
# @TODO: Use the `len` function to calculate the total number of loans in the list.
# Print the number of loans from the list
# YOUR CODE HERE!
loan_count = len(loan_costs)
print(f"The total number of loans is: {loan_count}")

# What is the total of all loans?
# @TODO: Use the `sum` function to calculate the total of all loans in the list.
# Print the total value of the loans
# YOUR CODE HERE!
loans_sum = sum(loan_costs)
print(f"The total value of the loans is: ${loans_sum}")

# What is the average loan amount from the list?
# @TODO: Using the sum of all loans and the total number of loans, calculate the average loan price.
# Print the average loan amount
# YOUR CODE HERE!
average_loan_value = loans_sum / loan_count
print(f"The average loan value is: ${average_loan_value}")

## create a line break between sections
print("----------------- Section 2 ------------------")

"""Part 2: Analyze Loan Data.

Analyze the loan to determine the investment evaluation.

Using more detailed data on one of these loans, follow these steps to calculate a Present Value, or a "fair price" for what this loan would be worth.

1. Use get() on the dictionary of additional information to extract the **Future Value** and **Remaining Months** on the loan.
    a. Save these values as variables called `future_value` and `remaining_months`.
    b. Print each variable.

    @NOTE:
    **Future Value**: The amount of money the borrower has to pay back upon maturity of the loan (a.k.a. "Face Value")
    **Remaining Months**: The remaining maturity (in months) before the loan needs to be fully repaid.

2. Use the formula for Present Value to calculate a "fair value" of the loan. Use a minimum required return of 20% as the discount rate.
3. Write a conditional statement (an if-else statement) to decide if the present value represents the loan's fair value.
    a. If the present value of the loan is greater than or equal to the cost, then print a message that says the loan is worth at least the cost to buy it.
    b. Else, the present value of the loan is less than the loan cost, then print a message that says that the loan is too expensive and not worth the price.

    @NOTE:
    If Present Value represents the loan's fair value (given the required minimum return of 20%), does it make sense to buy the loan at its current cost?
"""

# Given the following loan data, you will need to calculate the present value for the loan
loan = {
    "loan_price": 500,
    "remaining_months": 9,
    "repayment_interval": "bullet",
    "future_value": 1000,
}

# @TODO: Use get() on the dictionary of additional information to extract the Future Value and Remaining Months on the loan.
# Print each variable.
# YOUR CODE HERE!
## use capitalized variables in this section as indicated in the instruction line, to keep them contained within this section
Loan_Cost = loan.get("loan_price")
Future_Value = loan.get("future_value")
Remaining_Months = loan.get("remaining_months")

## print the loan parameters
print(f"Cost to buy the loan is $", Loan_Cost)
print(f"The future value is: ${Future_Value} and there are {Remaining_Months} months remaining on the loan.")


# @TODO: Use the formula for Present Value to calculate a "fair value" of the loan.
# Use a minimum required return of 20% as the discount rate.
#   You'll want to use the **monthly** version of the present value formula.
#   HINT: Present Value = Future Value / (1 + Discount_Rate/12) ** remaining_months
# YOUR CODE HERE!
## continue using caapitalized letters for this section to prevent issues with next section
## assign a discount rate
Discount_Rate = 0.20
## calculate the Fair Value of the loan and print this 
Fair_Value = Future_Value / (1 + Discount_Rate/12) ** Remaining_Months
print(f"The calculated fair value is: ${Fair_Value:.2f}")

# If Present Value represents what the loan is really worth, does it make sense to buy the loan at its cost?
# @TODO: Write a conditional statement (an if-else statement) to decide if the present value represents the loan's fair value.
#    If the present value of the loan is greater than or equal to the cost, then print a message that says the loan is worth at least the cost to buy it.
#    Else, the present value of the loan is less than the loan cost, then print a message that says that the loan is too expensive and not worth the price.
# YOUR CODE HERE!
## determine whether the loan is worth it or not and display the decision 
## if the future value is more than the current value, then it is worth it
if Fair_Value >= Loan_Cost:
    print("It's worth it, BUY IT!")
else:
    print("This is not worth it, DON'T buy it!")

## create a line break between sections
print("----------------- Section 3 ------------------")

"""Part 3: Perform Financial Calculations.

Perform financial calculations using functions.

1. Define a new function that will be used to calculate present value.
    a. This function should include parameters for `future_value`, `remaining_months`, and the `annual_discount_rate`
    b. The function should return the `present_value` for the loan.
2. Use the function to calculate the present value of the new loan given below.
    a. Use an `annual_discount_rate` of 0.2 for this new loan calculation.
"""

# Given the following loan data, you will need to calculate the present value for the loan
new_loan = {
    "loan_price": 800,
    "remaining_months": 12,
    "repayment_interval": "bullet",
    "future_value": 1000,
}

# @TODO: Define a new function that will be used to calculate present value.
#    This function should include parameters for `future_value`, `remaining_months`, and the `annual_discount_rate`
#    The function should return the `present_value` for the loan.
# YOUR CODE HERE!
## define the function to do the calcs. Use lower case letters to differentiate it from previous calcs.
def calculate_present_value(future_value, remaining_months, annual_discount_rate):
    present_value = future_value / (1 + annual_discount_rate/12) ** remaining_months
    return present_value

# @TODO: Use the function to calculate the present value of the new loan given below.
#    Use an `annual_discount_rate` of 0.2 for this new loan calculation.
# YOUR CODE HERE!
## obtain loan cost here, to be able to print for the user, and for later comparison.
loan_cost = new_loan.get("loan_price")
## assign discount rate, and determine present value by calling the function to calculate it.
annual_discount_rate = 0.20
present_value = calculate_present_value(
    new_loan["future_value"],
    new_loan["remaining_months"],
    annual_discount_rate, 
)

## user can visually compare the present value to the future value to verify evaluation
print(f"The present value of the loan is: ${present_value:.2f}")
print("Cost to buy the loan is: $", loan_cost)

## although not requested, evaluate whether the loan makes sense
## if the future value is more than what you're paying now, it is worth it
if present_value >= loan_cost:
    print("It's worth it, BUY IT!")
else:
    print("Not worth it, DON'T do it!")

## create a line break between sections
print("----------------- Section 4 ------------------")

"""Part 4: Conditionally filter lists of loans.

In this section, you will use a loop to iterate through a series of loans and select only the inexpensive loans.

1. Create a new, empty list called `inexpensive_loans`.
2. Use a for loop to select each loan from a list of loans.
    a. Inside the for loop, write an if-statement to determine if the loan_price is less than 500
    b. If the loan_price is less than 500 then append that loan to the `inexpensive_loans` list.
3. Print the list of inexpensive_loans.
"""

loans = [
    {
        "loan_price": 700,
        "remaining_months": 9,
        "repayment_interval": "monthly",
        "future_value": 1000,
    },
    {
        "loan_price": 500,
        "remaining_months": 13,
        "repayment_interval": "bullet",
        "future_value": 1000,
    },
    {
        "loan_price": 200,
        "remaining_months": 16,
        "repayment_interval": "bullet",
        "future_value": 1000,
    },
    {
        "loan_price": 900,
        "remaining_months": 16,
        "repayment_interval": "bullet",
        "future_value": 1000,
    },
]

# @TODO: Create an empty list called `inexpensive_loans`
# YOUR CODE HERE!
inexpensive_loans = []

# @TODO: Loop through all the loans and append any that cost $500 or less to the `inexpensive_loans` list
# YOUR CODE HERE!
for loan in loans:
    if loan["loan_price"] <= 500:
        inexpensive_loans.append(loan)

# @TODO: Print the `inexpensive_loans` list
# YOUR CODE HERE!
print(inexpensive_loans)

## create a line break between sections
print("----------------- Section 5 ------------------")

"""Part 5: Save the results.

Output this list of inexpensive loans to a csv file
    1. Use `with open` to open a new CSV file.
        a. Create a `csvwriter` using the `csv` library.
        b. Use the new csvwriter to write the header variable as the first row.
        c. Use a for loop to iterate through each loan in `inexpensive_loans`.
            i. Use the csvwriter to write the `loan.values()` to a row in the CSV file.

    Hint: Refer to the official documentation for the csv library.
    https://docs.python.org/3/library/csv.html#writer-objects

"""

# Set the output header
header = ["loan_price", "remaining_months", "repayment_interval", "future_value"]

## notify the user of number of candidate loans and that the output is being printed to a csv file
print("The number of loans $500 or lower is: ", len(inexpensive_loans))
print("This list of low-priced loans is being generated as a .csv file for you...")

# Set the output file path
output_path = Path("inexpensive_loans.csv")

# @TODO: Use the csv library and `csv.writer` to write the header row
# and each row of `loan.values()` from the `inexpensive_loans` list.
# YOUR CODE HERE!
with open(output_path, 'w') as csvfile:
    csvwriter = csv.writer(csvfile)

    ## write the header to the file
    csvwriter.writerow(header)

    ## write each resulting loan from the loop as a new row in the csv file
    for loan in inexpensive_loans:
        csvwriter.writerow(loan.values())
